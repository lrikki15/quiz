"use strict";

window.onload = () => {
  let screenCounter = 0;
  const pages = ['#quiz__preload', '#question1', '#question2', '#question3', '#question4', '#question5', '#question6', '#question7', '#result', '#getOffer'];
  const questions = ['', 'Для какого объекта Вам необходима система видеонаблюдения?', 'Сколько камер Вы планируете установить?', 'Время хранения архива:', 'Дополнительные пожелания к системе видеонаблюдения:', 'Как срочно Вам нужна система?', 'Примерная площадь обекта ', 'Вам нужен готовый комплект или монтаж системы под ключ?'];
  needSoundEvent();
  fastLevelChange();
  radioCheckActive();
  radioOnChange();
  funcSliders();
  showCurrentSphereQ2(document.querySelector('#question1__house'));
  addNavigationToButtons();
  addEventOnAllInputs(); //функции навигации

  function navigation(direction) {
    if (direction == 'forward') {
      let currentPage = document.querySelector("".concat(pages[screenCounter]));
      screenCounter == 7 ? hide(currentPage.parentElement.parentElement) : hide(currentPage);
      screenCounter++;
      let nextPage = document.querySelector("".concat(pages[screenCounter]));
      screenCounter == 1 ? show(nextPage.parentElement.parentElement, 'grid') : show(nextPage, 'flex');
    } else if ('back') {
      let currentPage = document.querySelector("".concat(pages[screenCounter]));
      screenCounter == 1 ? hide(currentPage.parentElement.parentElement) : hide(currentPage);
      screenCounter--;
      let nextPage = document.querySelector("".concat(pages[screenCounter]));
      screenCounter == 7 ? show(nextPage.parentElement.parentElement, 'grid') : show(nextPage, 'flex');
    }

    if (0 < screenCounter < 8) {
      refreshQuestion();
      checkButton();
    }
  } //добавление навигации на кнопки


  function addNavigationToButtons() {
    document.querySelector('.preload__button').onclick = () => navigation('forward');

    document.querySelector('.quiz__button_forward').onclick = () => navigation('forward');

    document.querySelector('.quiz__button_back').onclick = () => navigation('back');
  } //показать/скрыть элемент при навигации


  function hide(elem) {
    elem.style.opacity = 0;
    elem.style.display = 'none';
  }

  function show(elem, dispProperty) {
    elem.style.display = dispProperty;
    elem.style.opacity = 1;
  } //Обновить вопрос


  function refreshQuestion() {
    let question = document.querySelector('.quiz__question-text');
    question.textContent = questions[screenCounter];
  } //блокировка/разблокировка кнопки


  function checkButton() {
    let buttonForward = document.querySelector('.quiz__button_forward');

    if (!checkIsChosen(screenCounter)) {
      buttonForward.disabled = true;
    } else {
      buttonForward.disabled = false;
    }
  } //проверить выбран ли вариант на текущей странице


  function checkIsChosen(screenCounter) {
    let isTrue = 0;
    let currentPage = document.querySelector("".concat(pages[screenCounter]));

    switch (screenCounter) {
      case 1:
        let radiosQ1 = currentPage.querySelectorAll('.question1__input');
        radiosQ1.forEach(radio => {
          if (radio.checked) {
            isTrue++;
          }
        });
        break;

      case 2:
        let rangesQ2 = currentPage.querySelectorAll('.range__slider');
        rangesQ2.forEach(range => {
          if (range.value != 0) {
            isTrue++;
          }
        });
        break;

      case 3:
        let radiosQ3 = currentPage.querySelectorAll('.custom-radio');
        radiosQ3.forEach(radio => {
          if (radio.checked) {
            isTrue++;
          }
        });
        break;

      case 4:
        let checkboxesQ4 = currentPage.querySelectorAll('.custom-check');
        checkboxesQ4.forEach(checkbox => {
          if (checkbox.checked) {
            isTrue++;
          }
        });
        break;

      case 5:
        let radiosQ5 = currentPage.querySelectorAll('.custom-radio');
        radiosQ5.forEach(radio => {
          if (radio.checked) {
            isTrue++;
          }
        });
        break;

      case 6:
        let inputsQ6 = currentPage.querySelectorAll('input');
        inputsQ6.forEach(input => {
          if (input.value != 0) {
            isTrue++;
          }
        });
        break;

      case 7:
        let radiosQ7 = currentPage.querySelectorAll('.complectation__input');
        radiosQ7.forEach(radio => {
          if (radio.checked) {
            isTrue++;
          }
        });
        break;
    }

    return isTrue;
  } //радиокнопки Вопрос 1
  //проверка радиокнопок на checked Q1 - question 1


  function radioCheckActive() {
    let radioItemsQ1 = document.querySelectorAll("input[type='radio']");
    radioItemsQ1.forEach(item => {
      if (item.checked) {
        item.parentElement.classList.add('question1__item_active');
      } else {
        item.parentElement.classList.remove('question1__item_active');
      }
    });
  } //добавление ивента по изменению радио на 1 странице


  function radioOnChange() {
    let radioItemsQ1 = document.querySelectorAll('.question1__input');
    radioItemsQ1.forEach(item => {
      item.addEventListener('change', function () {
        let currentRadio = this;
        radioCheckActive();
        resetValues();
        showCurrentSphereQ2(currentRadio);
      });
    });
  } //показать во 2 вопросе нужную сферу применения, скрыв ненужное


  function showCurrentSphereQ2(input) {
    let currentSphere = input.dataset.choise;
    let camCountersQ2 = document.querySelectorAll('.camera-count__item');
    camCountersQ2.forEach(counter => {
      counter.style.display = 'none';
    });
    let currentCounterQ2 = document.querySelector(".camera-count__".concat(currentSphere));
    currentCounterQ2.style.display = 'flex';
  } //сбросить счетчики


  function resetValues() {
    //вопрос 2 счетчики камер увести на 0
    let q2 = document.querySelector('.question2');
    let ranges = q2.querySelectorAll('.range__slider');
    ranges.forEach(range => {
      range.value = 0;
      refreshRange(range);
    }); //вопрос 3 сбросить radio на первый вариант

    let q3 = document.querySelector('.question3');
    let radiosQ3 = q3.querySelectorAll('.custom-radio');
    radiosQ3.forEach(radio => {
      resetRadio(radio);
    }); //вопрос 4 сбросить чекбоксы 

    let q4 = document.querySelector('.question4');
    let checkboxesQ4 = q4.querySelectorAll('.custom-check');
    checkboxesQ4.forEach(checkbox => {
      resetCheckBox(checkbox);
    }); //вопрос 5 сбросить радио

    let q5 = document.querySelector('.question5');
    let radiosQ5 = q5.querySelectorAll('.custom-radio');
    radiosQ5.forEach(radio => {
      resetRadio(radio);
      hasOwnAnswer();
    });
  } //добавление обработчика на слайдер


  function funcSliders() {
    let sliders = document.querySelectorAll('.range__slider');
    sliders.forEach(slider => {
      slider.addEventListener('input', function () {
        refreshRange(this);
        checkButton();
      });
    });
  } //сброс радио


  function resetRadio(elem) {
    elem.checked = false;
  } //reset checkbox


  function resetCheckBox(elem) {
    elem.checked = false;
  } //обновить ползунок


  function refreshRange(current) {
    current.nextSibling.innerHTML = current.value;
    let percentValue = current.value / current.max * 100;
    let color = "linear-gradient(90deg, rgba(3,81,145,1) ".concat(percentValue, "%, rgba(128, 128, 128, 0.178) ").concat(percentValue, "%)");
    current.style.background = color;
  } //Вопрос 4 нужен звук


  function needSoundEvent() {
    let recordCheckbox = document.querySelector('#sound_need');
    recordCheckbox.addEventListener('change', checkNeedSound);
  }

  function checkNeedSound() {
    let recordCheckbox = document.querySelector('#sound_need');
    let toggleRange = document.querySelector('#doppel__soundrecord');

    if (recordCheckbox.checked) {
      toggleRange.classList.remove('doppel__soundrecord_hidden');
    } else {
      toggleRange.classList.add('doppel__soundrecord_hidden');
    }
  } //Вопрос5 свой вариант ответа
  //проверить чек у радио свой вариант, если да, то удалить класс скрытия, если нет - добавить


  function hasOwnAnswer() {
    let ownAnswerArea = document.querySelector('.fast__ownanswer');
    let hasOwn = document.querySelector('#fast__own');

    if (hasOwn.checked) {
      ownAnswerArea.classList.remove('fast__ownanswer_hidden');
    } else {
      ownAnswerArea.classList.add('fast__ownanswer_hidden');
    }
  } //навесить эту функцию на изменение всех ч/б в группе


  function fastLevelChange() {
    let radioItems = document.querySelectorAll(".fast__input");
    radioItems.forEach(item => {
      item.addEventListener('change', hasOwnAnswer);
    });
  } //общий ивент на все инпуты вопросов checkButton() - проверить, 
  //есть ли выбранные и введенные значения и если есть,
  //и если есть - разблокировать кнопку
  //ищем через родителя .quiz__question-body, чтоб не зацепить страницу с формой


  function addEventOnAllInputs() {
    let quizBody = document.querySelector('.quiz__question-body ');
    let allRadios = quizBody.querySelectorAll('input[type="radio"]');
    allRadios.forEach(item => {
      item.addEventListener('change', () => checkButton());
    });
    let allRanges = quizBody.querySelectorAll('input[type="range"]');
    allRanges.forEach(item => {
      item.addEventListener('input', () => checkButton());
    });
    let allCheckboxes = quizBody.querySelectorAll('input[type="checkbox"]');
    allCheckboxes.forEach(item => {
      item.addEventListener('change', () => checkButton());
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
